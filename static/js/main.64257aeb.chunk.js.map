{"version":3,"sources":["Square.js","GameBoard.js","GameDifficulty.js","Minesweeper.js","Stopwatch.js","App.js","serviceWorker.js","index.js"],"names":["Square","marker","this","props","classes","test","className","onClick","React","Component","GameBoard","row_index","col_index","visibleBoard","key","e","map","row","col","renderSquare","GameDifficulty","difficulty","type","value","checked","onChange","onChangeDifficulty","renderDifficultyButton","Minesweeper","stateObj","newGameState","state","numOfRows","numOfCols","bombPercentage","board","i","bomb","Math","random","push","Array","fill","visibleBoardHistory","moveNumber","gameOver","surroundingSquares","length","j","count","row_i","col_i","visibleMarker","slice","setState","surroundingBombs","surroundingBombsCount","markSurroundingBombCount","boardFull","playerWon","markerClicked","shiftKey","handleBombGuess","handleSafeGuess","numOfMoves","previousVisibleBoard","target","status","handleClick","handleChangeDifficulty","undoMove","resetGame","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQAsBeA,E,iLAlBX,IAAMC,EAASC,KAAKC,MAAMF,OACtBG,EAAU,cAOd,MANe,MAAXH,EACFG,GAAW,OACF,YAAYC,KAAKJ,KAC1BG,GAAW,WAIX,4BACEE,UAAWF,EACXG,QAASL,KAAKC,MAAMI,SACnBN,O,GAdYO,IAAMC,WC6BZC,E,qLA3BAC,EAAWC,GAAY,IAAD,OAC7BX,EAASC,KAAKC,MAAMU,aAAaF,GAAWC,GAEhD,OAAQ,kBAAC,EAAD,CACNE,IAAKF,EACLX,OAAQA,EACRM,QAAS,SAACQ,GAAO,EAAKZ,MAAMI,QAAQQ,EAAGJ,EAAWC,Q,+BAI5C,IAAD,OACP,OACEV,KAAKC,MAAMU,aAAaG,KAAI,SAACC,EAAKN,GAChC,OACE,yBAAKG,IAAKH,EAAWL,UAAU,aAC5BW,EAAID,KAAI,SAACE,EAAKN,GACb,OACE,EAAKO,aAAaR,EAAWC,c,GAlBrBJ,IAAMC,WC2BfW,E,+LA3BUC,GACrB,OACE,yBAAKf,UAAU,cACb,2BAAOA,UAAU,oBACjB,2BACEA,UAAU,mBACVgB,KAAK,QACLC,MAAOF,EACPG,QAAStB,KAAKC,MAAMkB,aAAeA,EACnCI,SAAUvB,KAAKC,MAAMuB,qBAEtBL,M,+BAML,OACE,6BACGnB,KAAKyB,uBAAuB,QAC5BzB,KAAKyB,uBAAuB,UAC5BzB,KAAKyB,uBAAuB,a,GAtBRnB,IAAMC,WCyRpBmB,GCzRSpB,IAAMC,U,YDI5B,WAAYN,GAAQ,IAAD,sBAGjB,IAAM0B,GAFN,4CAAM1B,KAEgB2B,eAHL,OAKjB,EAAKC,MAAQF,EALI,E,4EAQe,IAC5BG,EAAWC,EAAWC,EADfb,EAAoB,uDAAP,OAEL,SAAfA,GACFW,EAAYC,EAAY,GACxBC,EAAiB,IACO,WAAfb,GACTW,EAAYC,EAAY,GACxBC,EAAiB,KACO,SAAfb,IACTW,EAAYC,EAAY,GACxBC,EAAiB,IAInB,IADA,IAAIC,EAAQ,GACHC,EAAI,EAAGA,EAAIJ,EAAWI,IAAK,CAElC,IADA,IAAInB,EAAM,GACDmB,EAAI,EAAGA,EAAIH,EAAWG,IAAK,CAClC,IAAMC,EAAQH,EAAiBI,KAAKC,SAC9BtC,EAASoC,EAAO,IAAM,IAC5BpB,EAAIuB,KAAKvC,GAEXkC,EAAMK,KAAKvB,GAGb,IAAIJ,EAAe4B,MAAMT,GAAWU,KAAK,MAAM1B,KAAI,kBAAMyB,MAAMR,GAAWS,KAAK,SAE/E,MAAQ,CACNP,MAAOA,EACPtB,aAAcA,EACd8B,oBAAqB,GACrBC,WAAY,EACZC,UAAU,EACVxB,WAAYA,K,yCAIGV,EAAWC,GAG5B,IAFA,IAAIkC,EAAqB,GAEzB,MAAc,EAAE,EAAG,EAAG,GAAtB,eAA0B,CAArB,IAAIV,EAAC,KACR,GAAIzB,EAAYyB,GAAK,GAAKzB,EAAYyB,EAAIlC,KAAK6B,MAAMI,MAAMY,OACzD,cAAc,EAAE,EAAG,EAAG,GAAtB,eAA0B,CAArB,IAAIC,EAAC,KACJpC,EAAYoC,GAAK,GAAKpC,EAAYoC,EAAI9C,KAAK6B,MAAMI,MAAM,GAAGY,SAClD,IAANX,GAAiB,IAANY,GACbF,EAAmBN,KAAK,CAAC7B,EAAYyB,EAAGxB,EAAYoC,MAM9D,OAAOF,I,4CAGanC,EAAWC,GAC/B,IAAMkC,EAAqB5C,KAAK4C,mBAAmBnC,EAAWC,GAC1DqC,EAAQ,EAF8B,uBAI1C,YAA2BH,EAA3B,+CAA+C,CAAC,IAAD,6BAArCI,EAAqC,KAA9BC,EAA8B,KACN,MAAnCjD,KAAK6B,MAAMI,MAAMe,GAAOC,KAC1BF,GAAS,IAN6B,kFAS1C,OAAOA,I,kCAIG,IAAD,uBACT,YAAgB/C,KAAK6B,MAAMlB,aAA3B,+CAAyC,CAAC,IAAjCI,EAAgC,+BACvC,YAAmBA,EAAnB,+CAAuB,CACrB,IADqB,QAEnB,OAAO,GAH4B,oFADhC,kFAST,OAAO,I,gCAGCJ,GACR,IAAK,IAAIF,KAAaT,KAAK6B,MAAMI,MAC/B,IAAK,IAAIvB,KAAaV,KAAK6B,MAAMI,MAAMxB,GAAW,CAChD,IAAMV,EAASC,KAAK6B,MAAMI,MAAMxB,GAAWC,GACrCwC,EAAgBvC,EAAaF,GAAWC,GAC9C,GAAe,MAAXX,IAAmB,QAAQI,KAAK+C,GAClC,OAAO,EAKb,OAAO,I,sCAGOzC,EAAWC,GACzB,IAAIC,EAAe,GACnB,IAAI,IAAIuB,KAAKlC,KAAK6B,MAAMlB,aACtBA,EAAa2B,KAAKtC,KAAK6B,MAAMlB,aAAauB,GAAGiB,SAG/CxC,EAAaF,GAAWC,GAAaC,EAAaF,GAAWC,GAAa,KAAO,IAEjFV,KAAKoD,SAAS,CACZzC,aAAcA,M,+CAIOsB,EAAOxB,EAAWC,GACzC,IAAM2C,EAAmBrD,KAAKsD,sBAAsB7C,EAAWC,GAG7D,GAFFuB,EAAMxB,GAAWC,GAAa2C,EAEH,IAArBA,EAAuB,CACzB,IAAMT,EAAqB5C,KAAK4C,mBAAmBnC,EAAWC,GADrC,uBAEzB,YAA2BkC,EAA3B,+CAA+C,CAAC,IAAD,6BAArCI,EAAqC,KAA9BC,EAA8B,KACjB,OAAxBhB,EAAMe,GAAOC,KACfhB,EAAQjC,KAAKuD,yBAAyBtB,EAAOe,EAAOC,KAJ/B,mFAS7B,OAAOhB,I,sCAGOxB,EAAWC,GACzB,GAA+C,MAA3CV,KAAK6B,MAAMI,MAAMxB,GAAWC,GAAoB,CAClD,IAAIC,EAAe,GACnB,IAAI,IAAIuB,KAAKlC,KAAK6B,MAAMlB,aACtBA,EAAa2B,KAAKtC,KAAK6B,MAAMlB,aAAauB,GAAGiB,SAG/C,IAAI,IAAIjB,KAAKvB,EACX,IAAI,IAAImC,KAAKnC,EAAauB,GACO,MAA3BlC,KAAK6B,MAAMI,MAAMC,GAAGY,KACtBnC,EAAauB,GAAGY,GAAK,KAK3B9C,KAAKoD,SAAS,CACZT,UAAU,EACVhC,aAAcA,QAEX,CAEL,IADA,IAAIA,EAAe,GACXuB,EAAI,EAAGA,EAAIlC,KAAK6B,MAAMlB,aAAakC,OAAQX,IACjDvB,EAAa2B,KAAKtC,KAAK6B,MAAMlB,aAAauB,GAAGiB,SAG/CxC,EAAeX,KAAKuD,yBAAyB5C,EAAcF,EAAWC,GAEtEV,KAAKoD,SAAS,CACZzC,aAAcA,KAGZX,KAAKwD,aAAexD,KAAKyD,UAAU9C,KACrCX,KAAKoD,SAAS,CACZT,UAAU,O,kCAQN9B,EAAGJ,EAAWC,GAExB,IAAMgD,EAAgB1D,KAAK6B,MAAMlB,aAAaF,GAAWC,GACzD,KAAIV,KAAK6B,MAAMc,UAAae,GAAmC,MAAlBA,GAA7C,CAII7C,EAAE8C,SACJ3D,KAAK4D,gBAAgBnD,EAAWC,GAEhCV,KAAK6D,gBAAgBpD,EAAWC,GAGlC,IAAI+B,EAAsBzC,KAAK6B,MAAMY,oBAAoBU,QACzDV,EAAoBH,KAAKtC,KAAK6B,MAAMlB,cAEpCX,KAAKoD,SAAS,CACZX,oBAAqBA,O,kCAMvB,IAAMb,EAAe5B,KAAK4B,aAAa5B,KAAK6B,MAAMV,YAClDnB,KAAKoD,SACHxB,K,iCAKF,GAAK5B,KAAK6B,MAAMY,oBAAoBI,OAApC,CAIA,IAAMiB,EAAa9D,KAAK6B,MAAMY,oBAAoBI,OAC5CkB,EAAuB/D,KAAK6B,MAAMY,oBAAoBqB,EAAa,GACnErB,EAAsBzC,KAAK6B,MAAMY,oBAAoBU,MAAM,EAAGW,EAAa,GAEjF9D,KAAKoD,SAAS,CACZX,oBAAqBA,EACrB9B,aAAcoD,EACdpB,UAAU,O,6CAIS9B,GACrB,IAAMe,EAAe5B,KAAK4B,aAAaf,EAAEmD,OAAO3C,OAEhDrB,KAAKoD,SACHxB,K,+BAIM,IAEJqC,EAFG,OACDtD,EAAeX,KAAK6B,MAAMlB,aAWhC,OAPIsD,EAFAjE,KAAK6B,MAAMc,SACT3C,KAAKyD,UAAU9C,GACR,qBAEA,oBAGF,2DAGT,yBAAKP,UAAU,wBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,0BACb,kBAAC,EAAD,CACEO,aAAcA,EACdN,QAAS,SAACQ,EAAGJ,EAAWC,GAAf,OAA6B,EAAKwD,YAAYrD,EAAGJ,EAAWC,OAGzE,yBAAKN,UAAU,eACb,yBAAKA,UAAU,OACb,6BACE,2BAAI6D,KAGR,yBAAK7D,UAAU,OACb,kBAAC,EAAD,CACEe,WAAcnB,KAAK6B,MAAMV,WACzBK,mBAAoB,SAACX,GAAD,OAAO,EAAKsD,uBAAuBtD,OAE3D,yBAAKT,UAAU,OACb,yBAAKA,UAAU,aACb,4BACEC,QAAU,kBAAK,EAAK+D,YACpBhE,UAAU,mBAFZ,QAKA,4BACEA,UAAU,kBACVC,QAAU,kBAAK,EAAKgE,cAFtB,qB,GAvQU/D,IAAMC,YEKjB+D,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.64257aeb.chunk.js","sourcesContent":["import React from 'react';\n\nclass Square extends React.Component {\n  render() {\n    const marker = this.props.marker;\n    let classes = \"btn square \";\n    if (marker === \"*\") {\n      classes += \"bomb\";\n    } else if (/([0-9]|-)/.test(marker)) {\n      classes += \"clicked\";\n    }\n    \n    return(\n      <button \n        className={classes}\n        onClick={this.props.onClick}>\n        {marker}\n      </button>\n    );\n  } \n}\n\nexport default Square","import React from 'react';\nimport Square from './Square';\n\nclass GameBoard extends React.Component {\n  renderSquare(row_index, col_index) {\n    let marker = this.props.visibleBoard[row_index][col_index];\n\n    return (<Square \n      key={col_index}  \n      marker={marker} \n      onClick={(e) => {this.props.onClick(e, row_index, col_index)}} \n    />); \n  }\n  \n  render() {\n    return(\n      this.props.visibleBoard.map((row, row_index) => {\n        return(\n          <div key={row_index} className=\"board-row\">\n            {row.map((col, col_index) => {\n              return(\n                this.renderSquare(row_index, col_index)\n              ); \n            })}\n          </div>\n        );\n      }) \n    );\n  }\n}\n\nexport default GameBoard;","import React from 'react';\n\nclass GameDifficulty extends React.Component {\n  renderDifficultyButton(difficulty) {\n    return(\n      <div className=\"form-check\">\n        <label className=\"form-check-label\">\n        <input\n          className=\"form-check-input\"\n          type=\"radio\"\n          value={difficulty}\n          checked={this.props.difficulty === difficulty}\n          onChange={this.props.onChangeDifficulty}\n        />\n        {difficulty}\n        </label>\n      </div>\n    );\n  }\n  render() {\n    return (\n      <div>\n        {this.renderDifficultyButton(\"easy\")}\n        {this.renderDifficultyButton(\"medium\")}\n        {this.renderDifficultyButton(\"hard\")}\n      </div>\n    );\n  }\n}\n\nexport default GameDifficulty;","import React from 'react';\nimport GameBoard from './GameBoard';\nimport GameDifficulty from './GameDifficulty';\nimport Stopwatch from './Stopwatch';\n\nclass Minesweeper extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    const stateObj = this.newGameState();\n    \n    this.state = stateObj;\n  }\n  \n  newGameState(difficulty = \"easy\"){\n    let numOfRows, numOfCols, bombPercentage;\n    if (difficulty === \"easy\") {\n      numOfRows = numOfCols = 10;\n      bombPercentage = 0.2;\n    } else if (difficulty === \"medium\") {\n      numOfRows = numOfCols = 15;\n      bombPercentage = 0.25;\n    } else if (difficulty === \"hard\") {\n      numOfRows = numOfCols = 20;\n      bombPercentage = 0.4;\n    }\n    \n    let board = [];\n    for (let i = 0; i < numOfRows; i++) {\n      let row = [];\n      for (let i = 0; i < numOfCols; i++) {\n        const bomb = (bombPercentage > Math.random());\n        const marker = bomb ? \"*\" : \" \";\n        row.push(marker);\n      }\n      board.push(row);\n    }\n    \n    let visibleBoard = Array(numOfRows).fill(null).map(() => Array(numOfCols).fill(null));\n    \n    return ({\n      board: board,\n      visibleBoard: visibleBoard,\n      visibleBoardHistory: [],\n      moveNumber: 0,\n      gameOver: false,\n      difficulty: difficulty,\n    });\n  }\n  \n  surroundingSquares(row_index, col_index){\n    let surroundingSquares = [];\n    \n    for (let i of [-1, 0, 1]) {\n      if (row_index + i >= 0 && row_index + i < this.state.board.length) {\n        for (let j of [-1, 0, 1]) {\n          if (col_index + j >= 0 && col_index + j < this.state.board[0].length) {\n            if (i !== 0 || j !== 0)\n              surroundingSquares.push([row_index + i, col_index + j]);\n          }\n        }\n      }\n    }\n     \n    return surroundingSquares;\n  }\n  \n  surroundingBombsCount(row_index, col_index) {\n    const surroundingSquares = this.surroundingSquares(row_index, col_index);\n    let count = 0;\n    \n    for (let [row_i, col_i] of surroundingSquares) {\n      if (this.state.board[row_i][col_i] === \"*\") {\n        count += 1;\n      }\n    }\n    return count;\n    \n  }\n  \n  boardFull(){\n    for (let row of this.state.visibleBoard) {\n      for (let marker of row){\n        if (!marker) {\n          return false;\n        }\n      }\n    }\n    \n    return true;\n  }\n  \n  playerWon(visibleBoard){\n    for (let row_index in this.state.board){\n      for (let col_index in this.state.board[row_index]){\n        const marker = this.state.board[row_index][col_index];\n        const visibleMarker = visibleBoard[row_index][col_index];\n        if (marker !== \"*\" && !/[0-9]/.test(visibleMarker)) {\n          return false;\n        }\n      }\n    }\n    \n    return true;\n  }\n  \n  handleBombGuess(row_index, col_index){\n    let visibleBoard = [];\n    for(let i in this.state.visibleBoard) {\n      visibleBoard.push(this.state.visibleBoard[i].slice());\n    }\n    \n    visibleBoard[row_index][col_index] = visibleBoard[row_index][col_index] ? null : \"-\";\n    \n    this.setState({\n      visibleBoard: visibleBoard,\n    });\n  }\n  \n  markSurroundingBombCount(board, row_index, col_index){\n    const surroundingBombs = this.surroundingBombsCount(row_index, col_index);\n    board[row_index][col_index] = surroundingBombs;\n      \n      if (surroundingBombs === 0){\n        const surroundingSquares = this.surroundingSquares(row_index, col_index);\n        for (let [row_i, col_i] of surroundingSquares) {\n          if (board[row_i][col_i] === null){\n            board = this.markSurroundingBombCount(board, row_i, col_i);\n          }\n        }\n      }\n      \n    return board;\n  }\n  \n  handleSafeGuess(row_index, col_index) {\n    if (this.state.board[row_index][col_index] === \"*\") {\n      let visibleBoard = [];\n      for(let i in this.state.visibleBoard) {\n        visibleBoard.push(this.state.visibleBoard[i].slice());\n      }\n      \n      for(let i in visibleBoard) {\n        for(let j in visibleBoard[i]){\n          if (this.state.board[i][j] === \"*\") {\n            visibleBoard[i][j] = \"*\";\n          }\n        }\n      }\n      \n      this.setState({\n        gameOver: true,\n        visibleBoard: visibleBoard,\n      });\n    } else { \n      let visibleBoard = [];\n      for(let i = 0; i < this.state.visibleBoard.length; i++) {\n        visibleBoard.push(this.state.visibleBoard[i].slice());\n      }\n      \n      visibleBoard = this.markSurroundingBombCount(visibleBoard, row_index, col_index);\n      \n      this.setState({\n        visibleBoard: visibleBoard,\n      });\n     \n      if (this.boardFull() || this.playerWon(visibleBoard)){\n        this.setState({\n          gameOver: true,\n        });\n      }\n    }\n    \n    \n  }\n  \n  handleClick(e, row_index, col_index) {\n \n    const markerClicked = this.state.visibleBoard[row_index][col_index];\n    if (this.state.gameOver || (markerClicked && markerClicked !== \"-\")) {\n      return;\n    }\n    \n    if (e.shiftKey) {\n      this.handleBombGuess(row_index, col_index);\n    } else {\n      this.handleSafeGuess(row_index, col_index);\n    } \n    \n    let visibleBoardHistory = this.state.visibleBoardHistory.slice();\n    visibleBoardHistory.push(this.state.visibleBoard)\n    \n    this.setState({\n      visibleBoardHistory: visibleBoardHistory,\n    });\n    \n  }\n  \n  resetGame(){\n    const newGameState = this.newGameState(this.state.difficulty); \n    this.setState(\n      newGameState\n    );\n  }\n  \n  undoMove(){\n    if (!this.state.visibleBoardHistory.length) {\n      return;\n    }\n    \n    const numOfMoves = this.state.visibleBoardHistory.length;\n    const previousVisibleBoard = this.state.visibleBoardHistory[numOfMoves - 1];\n    const visibleBoardHistory = this.state.visibleBoardHistory.slice(0, numOfMoves - 1);\n    \n    this.setState({\n      visibleBoardHistory: visibleBoardHistory,\n      visibleBoard: previousVisibleBoard,\n      gameOver: false,\n    });\n  }\n  \n  handleChangeDifficulty(e) {\n    const newGameState = this.newGameState(e.target.value);\n    \n    this.setState(\n      newGameState\n    ) ;\n  }\n  \n  render() {\n    const visibleBoard = this.state.visibleBoard;\n    let status;\n    if (this.state.gameOver) {\n      if (this.playerWon(visibleBoard)) {\n        status = \"Congrats! You won!\";\n      } else {\n        status = \"Sorry! Try again!\";\n      }\n    } else {\n      status = \"Click on the safe tiles. Shift + Click to mark as a bomb\";\n    }\n    return (\n      <div className=\"container top-margin\">\n        <div className=\"row\">\n          <div className=\"col-md-auto game-board\">\n            <GameBoard \n              visibleBoard={visibleBoard} \n              onClick={(e, row_index, col_index) => this.handleClick(e, row_index, col_index)}\n             />\n          </div>\n          <div className=\"col-md-auto\">\n            <div className=\"row\">\n              <div>\n                <p>{status}</p>\n              </div>\n            </div>\n            <div className=\"row\">\n              <GameDifficulty \n                difficulty = {this.state.difficulty}\n                onChangeDifficulty={(e) => this.handleChangeDifficulty(e)}/>\n            </div>\n            <div className=\"row\">\n              <div className=\"btn-group\">\n                <button \n                  onClick={(()=> this.undoMove())}\n                  className=\"btn btn-primary\"\n                >Back\n                </button>\n                <button \n                  className=\"btn btn-primary\"\n                  onClick={(()=> this.resetGame())}\n                >New Game\n                </button>\n              </div>\n            </div>\n            \n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Minesweeper;","import React from 'react';\n\nclass Stopwatch extends React.Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      currentTime: new Date()\n    };\n    \n  }\n  \n  componentDidMount() {\n    this.timerID = setInterval(\n    () => this.tick(), \n    10\n    );\n  }\n  \n  componentWillUnmount() {\n    clearInterval(this.timeID);\n  }\n  \n  tick() {\n    this.setState({\n      currentTime: new Date(),\n    });\n  }\n  \n  render() {\n    const timeElapsed = this.state.currentTime - this.props.startTime;\n    let milliSeconds = timeElapsed % 1000;\n    let seconds = Math.floor(timeElapsed / 1000 % 60).toString().padStart(2, 0);\n    let minutes = Math.floor(timeElapsed / 60000).toString().padStart(2,0);\n    return (\n      <div>\n        <p>\n          {minutes}:{seconds}:{milliSeconds}\n        </p>\n        <p>\n          \n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Stopwatch;","import React from 'react';\nimport './App.css';\nimport Minesweeper from './Minesweeper';\n\nfunction App() {\n  return (\n    <Minesweeper/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}